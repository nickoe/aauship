23-10-2012

Course keeping control

The general idea is to have a state-space control algorithm in infinite loop as the main task. The control parametrization is based on the upcoming ship model, measurements and identification.
The program control the ship along the specified path. If there is no next waypoint or local path specified, the HLI calls the path planing methods.

Local planner:

Initial idea: using a pre-generated Euler-spiral or simple arc line, the program determines the required arc length and applies linear transformations to resize and rotate the path coordinates, thus creating a smooth path.
The initial idea was dropped after the following considerations:
Storing the full path coordinates is memory-consuming. Also, the path is either low-res or the linear transformation would be inefficient.
The path would be smooth but would not have optimal parameters.
I anticipated that the real-time calculation of the path would be hard to implement.

The new idea is originated from: Komlósi István: Mobilis robotok autonóm navigációja mozgó akadályok elkerülésével (István Komlósi: Autonomus navigation of mobile robots to avoid static and dynamic obsticles)
This is a half-finished project I was working on and was supposed to continue but I dropped it for AAU.
The idea is to determine the maximum possible path curvature that the robot can handle. The local path is generated in a way that the robot will always turn with the maximum possible curvature at the current speed, thus staying the closest to the waypoint without loosing speed. There is a threshold turn-angle, which determines that the robot requires only two identical euler-spiral paths to turn or an arc path that has the maximum curvature, with two euler spiral paths leading in or out.
In order to create the path the algorithm calculates 5 or 3 (depending on the threshold) key points and fits a Hermite-polinom onto them. From this point on the local path in the given range is determined by these points only, thus saving memory and CPU time, while calculating a better path.

The Fresnel-integrals, which are basically the coordinates of the Euler-spiral are computed based on taylor-polynoms. Pre-computing and storing the results in a lookup-table should be considered.

I will continue with a better waypoint-planer tomorrow and make a raw documentation about it as well.
