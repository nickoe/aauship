HLI main modules, ideal workflow of the modules, ideal workflow of the system.

1: Main function

The main function is responsible of initializing the system and the simulator (optional). The main function is supposed to call functions only from the Ship and Simulator Objects. The initializing and control loop process is shown on figure 11.

By clearly separating the Simulation and Ship objects, the Main functions for the simulation and real-world embedded system have only minor differences.
The control loop doesn't use any prioritizing or task-switching mechanism. There are no concurrent tasks, the pathplanning and ship motor control happen in different time ranges. A future improvement could be to compute the pathplanning of the next path-segment concurrently with the higher priority motor control task to an almost ready-state, therefore the computing time of the pathplanning should decrease.

2: Object Library - Utility Object Definitions

The Object Library is a collection of utility functions. Some of them are actively used in the embedded system, some of them are used only with the simulated system, some of them are only for testing and some of them are not used at all - like branches of the main version, objects and functions that used to have an important task, but are somewhat outdated or replaced. Detailed explanation below:

O_LocalPath:
This object is responsible for computing and storing a curved path object.

Function descriptions:
def __init__(self, gamma, sigma_max, kappa_max):
        
        '''
        Initializes the Object with the required path parameters, like
        R_min := minimum turning radius
        Kappa := Path curvature
        Sigma = Beta/v^2 := Curve proportional size, max change of angular velocity / velocity^2
        
        phi_max := maximum turning angle with Euler spirals only
        '''
	Initializes the local path planner with the planning parameters.

def get_PathPoly(self):
        '''
        Returns the calculated Path Polynom
        '''

 def PositionPoly(self, p_Nm, p_Nt, p_Np):
        '''
        Based on the coordinates of Start, Turn and End points,
        the method rotates and shifts of the turn-path coordinates
        to their correct positions
        '''

def FitPath(self, definition):
        '''
        Fits a Hermite-polynom to the
        3 or 5 key-points of the initial path.
        This step is required, because the Spiral-Arc-Spiral
        path can not be described in a closed formula.
        The method populates the line with a predefined
        (definition) number of points along the path.
        
        Returns a list of points, which will be passed to
        the PositionPoly function later.
        '''

def PlotTurn(self, color = 'k'):
        '''
        Plots the points of the turn.
        Should not be used under normal circumstances.
        '''

3: Ship - Object Definition

The Ship object stores the known parameters of the Ship (known: actual sensor values, path status, etc.) and controls the value of the Ship actuators in order to control the Ship.

Function descriptions:

def __init__(self, init_position):
        '''
        Initializes the parameters of the ship
        - Parameters to calculate proper turn paths
        - Initial sensor parameters for the control
        - Initial start waypoint
        - Navigation parameters (FollowDistance)
        '''
		
	The init function sets all the known parameters of the ship to a default value, most notably the initial position, pathplanning parameters (theoretical turning capabilities of the ship), initial Navigational states (WP, SWP) and initial sensor values to zero. The sensor walues will later be replaced with actual sensor information, before the first control cycle.
		
def SetWaypoints(self, WPC):
        '''
        A method to hand-set the required waypoints
        Accepts a 2*n shaped numpy array
        where A[0,n] is the X, A[1,n] is the Y coordinate
        '''
        
	This method is to replace the current set of waypoints with the new set from the WPC Parameter. Only replaces the waypoints, does not restart the navigation process fom WP 0!
		
def Plan_WP(self, coastline, decimation, safety):
        
        '''
        Plans Waypoints in a snake-way if the coastline parameter is known
        '''
		
	Calls the Waypoint planner utility object for a given coastline and pathplanning parameters.
		
def Plan_FullPath(self, plotit = 0):
        
        '''
        # Plans and plots all of the Sub-WayPoints of the system.
        # Should not be used under normal circumstances
        '''
		
	Testing function, computes the ideal pathline of the ship trough all of the waypoints.
		
def Plan_LocalPath(self, PrevRange):
        
        '''
        Plans the local course over the next waypoint
        Contains a straight path and the required turn
        Outputs a list of SWP-s
        '''
		
	Local path computation, calls the sub-pathplanners for curved and straight paths. Outputs two set of Subwaypoints, one for the curved, another for the straight path.
	Results in an int number: If for some reason there are 3 waypoints in a staight line, then no valid path can be calculated. In that case the function drops the 3rd Waypoint and uses the next one in line. i equals to the waypoint skips, or i equals to -1 if there are no more waypoints to read.
		
def get_PathSegment(self):
        
        '''
        Forms the calculates Straight path and Turn path into an ordered list of points
        If WPsEnded == 1 the only SWP is the starting point
        '''
		
	This method outputs the coordinates of the Sub-Waypoints in an ordered vector for a single Path segment. The Control function parses this vector for the next value of the Sub-Waypoint.
	The function determines the direction of the raw SWP vectors. Each path segment consists of a straight and a curved path after. The method checks if the first or the last point is closer to the current position, the checks if the first or last point of the curved path is closer to the end of the straight path. After setting the right order of the vectors, the function joins them and outputs the vector of ordered coordinates.
		
def PlotPath(self, color):
        '''
        Plotting current path. Should not be used under normal circumstances
        '''
		
	A simple plotting method, it can only be used during simulation.
		
def FlushPath(self, restart):
        '''
        Flushes all the current SWP data and resets the path to the specified WP
        Should be initialized by operator only
        '''
		
	This method resets all of the current SWP data and the sets the last WP to a specified value. The effect of this function is very strong and can result in a disaster. MUST BE ACTIVATED MANUALLY AND WITH CARE!
	Definition of Disaster: The initial position of the ship and the next WP can be distand, and there's no WP planning in between. Can cause collision or the ship can be stranded
		
def Control_Step(self):
        '''
        Outputs the calculated motor speeds based on the sensor inputs
        '''
		
	The Control Step method sets the actuators of the ship to an optimal value to control the ship adequately. This method is called in each timestep.
	The first task is to define the validity of the SubWaypoint. If the ship is closer to the SWP than a predefined value, the validity of the SWP is zero, the control method must jump to the next SWP. The validity distance can not be lower than the minimum turning radius of the ship, and should be somewhat higher than that. For higher speeds higher validity range results in better path-keeping, for lower speeds a smaller validity radius results on more precise movement.
		
	The motor output is then set based on the sensor values.
		
def ReadStates(self, v, theta, omega, Pos):
        '''
        Reads systems states from sensors (processed data)
        '''
		
	The parameters of this method are the processed sensor datas, output by the Python Serial Communication object. The values are inserted into the state estimation matrix.
		
def get_Thera_r(self):
        '''
        Calculates the required heading
        '''
		
	The method calls the Cosine Law function with the Y extended self position, self position and the position of the Sub-Waypoint. The function then outputs the angle of the triangle at the self position. Because the self(YExtended)-self(basic) = (0, Y) the resulting angle is the absolute value of the required heading.
	If the X coordinate of the SWP is lower than the self position, the SWP is on the left plane, therefore the required heading must be inverted. (More about the headings and control in the control strategy section)
		
def get_Delta(self, Theta_r):
        
        '''
        Calculates the current deviation from heading
        '''
		
	Calculates the deviation from current heading. The calculated delta is the normalized: the current heading (Theta) is in the range of [-pi,pi]+k*pi | k = ..-2,-1,0,1,2... It's trivial, that the control matrices would not work properly with an angle error value > 2 pi. Therefore the +k*pi part must be cut off. This is implemented by trigonometrial functions, exploiting the periodicity of these functions.
		
def AddCourse(self, WPC):

        '''
        Append a new Waypoint to the list of Waypoints
        '''

def AddRelativeCourse(self, WPC):

        '''
        Append a new Relative Waypoint to the list of Waypoints. The relative waypoint is defined in the Body frame, in meters[X,Y]
        '''

4: Simulator - Object Definition

The Simulator object stores the unknown parameters of the Ship (unknown: system model, actual states, position, etc.) and simulates the changes of these parameters effected by the Ship actuators.